# Hybrid Assessment Preparation Workflow
# Prepares repository data for manual GitHub Copilot assessment  
# Uses only GITHUB_TOKEN - no additional API keys required

name: Hybrid Assessment Preparation

on:
  # Scheduled preparation (weekly on Mondays at 9 AM UTC)
  schedule:
    - cron: '0 9 * * 1'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      assessment_type:
        description: 'Type of assessment to prepare'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - security-focused
          - compliance-audit
          - migration-readiness
      
      output_version:
        description: 'Assessment report version (e.g., 1.2.0)'
        required: true
        default: 'auto-increment'
        type: string

  # Trigger on significant repository changes
  push:
    branches: [main, master]
    paths:
      - '.github/workflows/**'
      - 'security/**'
      - 'SECURITY.md'
      - 'README.md'
      - 'package.json'
      - 'requirements.txt'
      - 'Dockerfile'
      - '*.tf'
      - '*.tfvars'

jobs:
  prepare-assessment:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      security-events: read
    
    env:
      ASSESSMENT_TYPE: ${{ github.event.inputs.assessment_type || 'comprehensive' }}
      OUTPUT_VERSION: ${{ github.event.inputs.output_version || 'auto-increment' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive analysis
    
    - name: Validate Assessment Framework
      run: |
        echo "Validating assessment framework files..."
        if [ ! -f "docs/gh-assessment-template.md" ]; then
          echo "❌ gh-assessment-template.md not found"
          exit 1
        fi
        if [ ! -f "docs/gh-assessment-prompt.md" ]; then
          echo "❌ gh-assessment-prompt.md not found"
          exit 1
        fi
        echo "✅ Assessment framework files validated"
    
    - name: Determine Assessment Version
      id: version
      run: |
        if [ "${{ env.OUTPUT_VERSION }}" = "auto-increment" ]; then
          # Find latest assessment report and increment version
          latest_version=$(find . -name "gh-assessment-report-v*.md" 2>/dev/null | \
            sed 's/.*v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/' | \
            sort -V | tail -1)
          
          if [ -z "$latest_version" ]; then
            new_version="1.0.0"
          else
            # Increment minor version
            IFS='.' read -r major minor patch <<< "$latest_version"
            new_version="$major.$((minor + 1)).0"
          fi
        else
          new_version="${{ env.OUTPUT_VERSION }}"
        fi
        
        echo "assessment_version=$new_version" >> $GITHUB_OUTPUT
        echo "Assessment version: $new_version"
    
    - name: Generate Repository Context
      id: context
      run: |
        echo "Generating comprehensive repository context..."
        
        # Create main repository context file
        cat > assessment-context.md << 'EOF'
        # Repository Assessment Context
        
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Assessment Type:** ${{ env.ASSESSMENT_TYPE }}
        **Target Version:** ${{ steps.version.outputs.assessment_version }}
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Purpose:** Context for GitHub Copilot manual assessment
        
        ---
        
        ## Repository Structure Overview
        
        ### File Count Summary
        EOF
        
        # Add file statistics
        echo "- **Total Files:** $(find . -type f | wc -l)" >> assessment-context.md
        echo "- **Terraform Files:** $(find . -name "*.tf" -o -name "*.tfvars" | wc -l)" >> assessment-context.md
        echo "- **Documentation Files:** $(find . -name "*.md" | wc -l)" >> assessment-context.md
        echo "- **Configuration Files:** $(find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" | wc -l)" >> assessment-context.md
        echo "" >> assessment-context.md
        
        # Add directory structure
        echo "### Directory Structure" >> assessment-context.md
        echo '```' >> assessment-context.md
        find . -type d | head -20 | sort >> assessment-context.md
        echo '```' >> assessment-context.md
        echo "" >> assessment-context.md
        
        # Add key files list
        echo "### Key Files for Assessment" >> assessment-context.md
        echo '```' >> assessment-context.md
        find . -type f \( -name "*.tf" -o -name "*.tfvars" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" \) | head -30 | sort >> assessment-context.md
        echo '```' >> assessment-context.md
        echo "" >> assessment-context.md
        
        # Add README content if exists
        if [ -f "README.md" ]; then
          echo "## Repository README" >> assessment-context.md
          echo '```markdown' >> assessment-context.md
          head -30 README.md >> assessment-context.md
          echo '```' >> assessment-context.md
          echo "" >> assessment-context.md
        fi
        
        # Add key configuration files
        echo "## Key Configuration Files" >> assessment-context.md
        
        # Terraform main files
        for file in main.tf provider.tf vars.tf output.tf; do
          if [ -f "$file" ]; then
            echo "### $file" >> assessment-context.md
            echo '```hcl' >> assessment-context.md
            head -20 "$file" >> assessment-context.md
            echo '```' >> assessment-context.md
            echo "" >> assessment-context.md
          fi
        done
        
        # Terraform variables files
        for file in *.tfvars; do
          if [ -f "$file" ]; then
            echo "### $file" >> assessment-context.md
            echo '```hcl' >> assessment-context.md
            head -15 "$file" >> assessment-context.md
            echo '```' >> assessment-context.md
            echo "" >> assessment-context.md
          fi
        done
        
        # GitHub workflows
        if [ -d ".github/workflows" ]; then
          echo "### GitHub Workflows" >> assessment-context.md
          echo "**Available workflows:**" >> assessment-context.md
          ls .github/workflows/*.yml 2>/dev/null | while read workflow; do
            echo "- $(basename "$workflow")" >> assessment-context.md
          done
          echo "" >> assessment-context.md
        fi
        
        echo "context_file=assessment-context.md" >> $GITHUB_OUTPUT
    
    - name: Generate GitHub Copilot Prompts
      id: prompts
      run: |
        echo "Creating GitHub Copilot ready-to-use prompts..."
        
        cat > copilot-prompts.md << 'EOF'
        # GitHub Copilot Assessment Prompts
        
        **Version:** ${{ steps.version.outputs.assessment_version }}
        **Assessment Type:** ${{ env.ASSESSMENT_TYPE }}
        **Repository:** ${{ github.repository }}
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Instructions for Using These Prompts
        
        1. **Open VS Code** with this repository
        2. **Open GitHub Copilot Chat** (Ctrl+Shift+I or Cmd+Shift+I)
        3. **Copy and paste** the prompts below one by one
        4. **Review and refine** Copilot's responses
        5. **Save the final assessment** as `docs/gh-assessment-report-v${{ steps.version.outputs.assessment_version }}.md`
        
        ---
        
        ## Prompt 1: Initial Assessment Setup
        
        ```
        I need to conduct a comprehensive GitHub repository assessment. Please analyze this repository based on the following context:
        
        **Repository Context:** Please read the file `assessment-context.md` in this workspace for complete repository details.
        
        **Assessment Framework:** Please read the files:
        - `docs/gh-assessment-template.md` (assessment structure)
        - `docs/gh-assessment-prompt.md` (detailed instructions)
        
        **Assessment Requirements:**
        - Type: ${{ env.ASSESSMENT_TYPE }}
        - Version: ${{ steps.version.outputs.assessment_version }}
        - Focus: Terraform infrastructure with Azure deployment
        - Format: Complete markdown report following the template structure
        
        Please start by confirming you can access these files and understanding the assessment scope.
        ```
        
        ## Prompt 2: Repository Structure Analysis
        
        ```
        Based on the repository context, please analyze:
        
        1. **Repository Organization**: How well is the repository structured?
        2. **File Naming**: Are naming conventions consistent?
        3. **Documentation**: Is documentation adequate and up-to-date?
        4. **Configuration Management**: How are configurations organized?
        
        Focus on:
        - Terraform file organization
        - Variable management approach
        - Module structure (if any)
        - Documentation completeness
        
        Provide specific findings with evidence from the repository.
        ```
        
        ## Prompt 3: Security Analysis
        
        ```
        Conduct a security analysis of this repository:
        
        1. **Secrets Management**: How are sensitive values handled?
        2. **Access Controls**: What access controls are in place?
        3. **Terraform Security**: Are there security best practices in Terraform code?
        4. **Workflow Security**: Are GitHub Actions workflows secure?
        
        Look for:
        - Hardcoded secrets or credentials
        - Terraform state security
        - Branch protection settings
        - Workflow permissions
        
        Rate each area and provide specific recommendations.
        ```
        
        ## Prompt 4: Code Quality Assessment
        
        ```
        Evaluate the code quality aspects:
        
        1. **Terraform Best Practices**: Does the code follow Terraform standards?
        2. **Resource Naming**: Are Azure resources named consistently?
        3. **Variable Usage**: How are variables defined and used?
        4. **Code Comments**: Is the code adequately commented?
        
        Focus on:
        - Terraform formatting and style
        - Resource organization
        - Variable and output definitions
        - Code maintainability
        
        Provide a quality score and improvement suggestions.
        ```
        
        ## Prompt 5: Compliance and Standards
        
        ```
        Assess compliance with organizational standards:
        
        1. **Naming Conventions**: Do resources follow naming standards?
        2. **Tagging Strategy**: Are resources properly tagged?
        3. **Network Security**: Are network configurations secure?
        4. **Monitoring Setup**: Is monitoring and logging configured?
        
        Evaluate against:
        - Azure Well-Architected Framework
        - Terraform best practices
        - Infrastructure as Code standards
        - Security compliance requirements
        
        Generate compliance scores and gap analysis.
        ```
        
        ## Prompt 6: Final Report Generation
        
        ```
        Now create the final assessment report using the template structure from `docs/gh-assessment-template.md`.
        
        **Requirements:**
        1. **Use the exact template structure** with all sections
        2. **Replace all placeholders** with actual findings from analysis
        3. **Include specific evidence** from the repository
        4. **Provide actionable recommendations** with implementation details
        5. **Ensure version consistency** (filename and document header both v${{ steps.version.outputs.assessment_version }})
        
        **Critical Details:**
        - Repository: ${{ github.repository }}
        - Assessment Type: ${{ env.ASSESSMENT_TYPE }}
        - Version: ${{ steps.version.outputs.assessment_version }}
        - Technology Focus: Terraform + Azure
        - Date: $(date -u +"%Y-%m-%d")
        
        Generate the complete markdown report ready to save as `docs/gh-assessment-report-v${{ steps.version.outputs.assessment_version }}.md`
        ```
        
        ## Prompt 7: Quality Validation
        
        ```
        Before finalizing, please validate the assessment report:
        
        1. **Version Consistency**: Does the filename version match the document header?
        2. **Template Compliance**: Are all template sections included?
        3. **Placeholder Replacement**: Are all [PLACEHOLDER] values replaced?
        4. **Evidence-Based**: Are findings supported by repository evidence?
        5. **Actionable Recommendations**: Are recommendations specific and implementable?
        
        If any issues are found, please provide corrections.
        ```
        
        ---
        
        ## Tips for Best Results
        
        - **Process prompts sequentially** for comprehensive analysis
        - **Review Copilot responses** and ask for clarification if needed
        - **Reference specific files** by name when asking for details
        - **Ask for examples** when recommendations are too general
        - **Validate final output** against the template structure
        
        ## Expected Output
        
        **Final deliverable:** `docs/gh-assessment-report-v${{ steps.version.outputs.assessment_version }}.md`
        
        This file should be a complete, professional assessment report ready for organizational use.
        EOF
        
        echo "prompts_file=copilot-prompts.md" >> $GITHUB_OUTPUT
    
    - name: Generate Assessment Summary
      id: summary
      run: |
        echo "Creating assessment preparation summary..."
        
        cat > assessment-preparation-summary.md << 'EOF'
        # Assessment Preparation Complete
        
        **Repository:** ${{ github.repository }}
        **Preparation Version:** ${{ steps.version.outputs.assessment_version }}
        **Assessment Type:** ${{ env.ASSESSMENT_TYPE }}
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 🤖 Ready for GitHub Copilot Assessment
        
        Your repository has been analyzed and prepared for manual assessment using your GitHub Copilot license.
        
        ## 📁 Generated Files
        
        1. **📊 `assessment-context.md`** - Complete repository analysis
        2. **🎯 `copilot-prompts.md`** - Ready-to-use Copilot prompts  
        3. **📋 `docs/gh-assessment-template.md`** - Assessment template
        4. **🔧 `docs/gh-assessment-prompt.md`** - Assessment instructions
        
        ## 🚀 Next Steps (Manual - 10 minutes)
        
        ### Step 1: Open VS Code
        - Open this repository in VS Code
        - Ensure GitHub Copilot is enabled
        
        ### Step 2: Open Assessment Files
        - 📊 Open `assessment-context.md` (repository data)
        - 🎯 Open `copilot-prompts.md` (step-by-step prompts)
        
        ### Step 3: Use GitHub Copilot Chat
        - Open Copilot Chat (Ctrl+Shift+I or Cmd+Shift+I)
        - Copy prompts from `copilot-prompts.md` one by one
        - Paste into Copilot Chat and follow the analysis
        
        ### Step 4: Generate Assessment
        - Use Prompt 6 to generate the final report
        - Save as `docs/gh-assessment-report-v${{ steps.version.outputs.assessment_version }}.md`
        - Commit the results to repository
        
        ## 💰 Cost Breakdown
        
        - **Automation Cost:** $0 (uses GitHub Actions free tier)
        - **AI Analysis Cost:** $0 (uses your existing Copilot license)
        - **Total Additional Cost:** $0
        
        ## ⏱️ Time Investment
        
        - **Automated Preparation:** 2-3 minutes (just completed)
        - **Manual Assessment:** 8-12 minutes with Copilot
        - **Total Time:** ~15 minutes for complete assessment
        
        ## 🎯 Expected Quality
        
        - **Analysis Depth:** Comprehensive (GitHub Copilot quality)
        - **Repository Coverage:** Complete automated scanning
        - **Technology Focus:** Terraform + Azure optimized
        - **Professional Output:** Enterprise-ready assessment report
        
        ---
        
        **💡 Tip:** The prompts in `copilot-prompts.md` are designed to work perfectly with your GitHub Copilot license. Just copy, paste, and follow along!
        EOF
        
        echo "summary_file=assessment-preparation-summary.md" >> $GITHUB_OUTPUT
    
    - name: Create Preparation Issue
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read preparation summary
          const summaryContent = fs.readFileSync('${{ steps.summary.outputs.summary_file }}', 'utf8');
          
          // Create issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🎯 Assessment Preparation Ready v${{ steps.version.outputs.assessment_version }} - GitHub Copilot Manual Step Needed`,
            body: summaryContent,
            labels: ['assessment', 'preparation-complete', 'copilot-ready', '${{ env.ASSESSMENT_TYPE }}']
          });
          
          console.log(`✅ Preparation issue created: ${issue.data.html_url}`);
    
    - name: Commit Preparation Files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Assessment Preparation Bot"
        
        # Add all generated files
        git add assessment-context.md
        git add copilot-prompts.md  
        git add assessment-preparation-summary.md
        
        git commit -m "🎯 Prepare assessment v${{ steps.version.outputs.assessment_version }} for GitHub Copilot

        - Assessment Type: ${{ env.ASSESSMENT_TYPE }}
        - Repository Context: Generated
        - Copilot Prompts: Ready for manual use
        - Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Next: Manual assessment with GitHub Copilot (10 minutes)"
        
        git push
        
        echo "✅ Preparation files committed and pushed"
    
    - name: Upload Preparation Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: assessment-prep-v${{ steps.version.outputs.assessment_version }}
        path: |
          assessment-context.md
          copilot-prompts.md
          assessment-preparation-summary.md
          docs/gh-assessment-template.md
          docs/gh-assessment-prompt.md
        retention-days: 90
    
    - name: Summary Output
      run: |
        echo "🎯 Assessment Preparation Complete!"
        echo ""
        echo "📊 Generated Files:"
        echo "   ✅ assessment-context.md (repository analysis)"
        echo "   ✅ copilot-prompts.md (ready-to-use prompts)"
        echo "   ✅ assessment-preparation-summary.md (instructions)"
        echo ""
        echo "🚀 Next Steps:"
        echo "   1. Open VS Code with this repository"
        echo "   2. Open copilot-prompts.md"
        echo "   3. Use GitHub Copilot Chat with the provided prompts"
        echo "   4. Generate assessment report (10 minutes)"
        echo ""
        echo "💰 Total Cost: $0 (uses your Copilot license)"
        echo "⏱️ Manual Time: ~10 minutes"
        echo "🎯 Result: Professional assessment report"
